# t_pre_clean_v2.py
import json, re, unicodedata
from pathlib import Path
from pythainlp.util import normalize

# ---------- PATH ----------
input_file = Path("data/t_news.jsonl")   # р╣Др╕Яр╕ер╣Мр╕Ир╕▓р╕Бр╕Вр╕▒р╣Йр╕Щр╕Хр╕нр╕Щр╕Бр╣Ир╕нр╕Щр╕лр╕Щр╣Йр╕▓
output_file = Path("data/cleaned_news.jsonl")
output_file.parent.mkdir(parents=True, exist_ok=True)

# ---------- р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Кр╣Ир╕зр╕в ----------
def remove_tail_noise(text: str) -> str:
    """
    р╕ер╕Ър╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕кр╣Ир╕зр╕Щр╕Чр╣Йр╕▓р╕вр╕Чр╕╡р╣Ир╣Др╕бр╣Ир╣Гр╕Кр╣Ир╣Ар╕Щр╕╖р╣Йр╕нр╕Вр╣Ир╕▓р╕з р╣Ар╕Кр╣Ир╕Щ р╣Ар╕Др╕гр╕Фр╕┤р╕Х р╕нр╕▒р╕ер╕Ър╕▒р╣Йр╕б р╣Бр╕Кр╕гр╣Мр╣Ар╕гр╕╖р╣Ир╕нр╕Зр╕Щр╕╡р╣Й р╕пр╕ер╕п
    """
    patterns = [
        r"р╣Вр╕лр╕ер╕Фр╣Ар╕Юр╕┤р╣Ир╕б.*", r"р╕Фр╕╣р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф\s*\d+\s*р╕ар╕▓р╕Ю.*", r"р╣Бр╕Кр╕гр╣Мр╣Ар╕гр╕╖р╣Ир╕нр╕Зр╕Щр╕╡р╣Й.*",
        r"р╕Вр╕нр╕Вр╕нр╕Ър╕Др╕╕р╕У.*", r"р╕Ьр╕╣р╣Йр╣Ар╕Вр╕╡р╕вр╕Щ.*", r"Facebook.*", r"Twitter.*",
        r"LINE.*", r"р╕Хр╕┤р╕Фр╕Хр╕▓р╕бр╣Вр╕Лр╣Ар╕Кр╕╡р╕вр╕е.*", r"р╣Ар╕бр╣Йр╕▓р╕Чр╣Мр╕Бр╕▒р╕Щр╕Чр╕▒р╣Йр╕Зр╣Ар╕бр╕╖р╕нр╕З.*"
    ]
    for p in patterns:
        text = re.split(p, text)[0]
    return text.strip()

def clean_text(txt: str) -> str:
    """р╕Чр╕│р╕Др╕зр╕▓р╕бр╕кр╕░р╕нр╕▓р╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Бр╣Ир╕нр╕Щ labeling"""
    if not txt:
        return ""
    # р╕ер╕Ъ HTML tag р╣Бр╕ер╕░ emoji
    txt = re.sub(r"<[^>]+>", " ", txt)
    txt = re.sub(r"[\U00010000-\U0010ffff]", "", txt)

    # Normalize р╕Хр╕▒р╕зр╕нр╕▒р╕Бр╕йр╕г (р╕зр╕гр╕гр╕Ур╕вр╕╕р╕Бр╕Хр╣М, р╕Юр╕┤р╕бр╕Юр╣Мр╕Лр╣Йр╕нр╕Щ)
    txt = unicodedata.normalize("NFC", txt)
    txt = normalize(txt)

    # р╕ер╕Ър╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕лр╕бр╕▓р╕вр╕Др╕│р╕Юр╕╣р╕Фр╕Лр╣Йр╕│р╣Ж р╣Бр╕ер╕░р╕Кр╣Ир╕нр╕Зр╕зр╣Ир╕▓р╕Зр╣Ар╕Бр╕┤р╕Щ
    txt = re.sub(r"[\"тАЬтАЭтАШтАЩ]+", "", txt)
    txt = re.sub(r"\s{2,}", " ", txt)
    
    # CLEAN FUCKING STUPID WORDS
    txt = re.sub(" р╕Юр╕┤р╕бр╕Юр╣М", " ", txt)
    txt = re.sub("&nbsp;", " ", txt)
    txt = re.sub(r"\s*\+\s*", " ", txt)

    txt = re.sub(r"TAGS:.*$", "", txt, flags=re.MULTILINE)
    txt = re.sub(r"р╣Бр╕лр╕ер╣Ир╕Зр╕нр╣Йр╕▓р╕Зр╕нр╕┤р╕З.*$", "", txt, flags=re.MULTILINE)
    txt = re.sub(r"р╕нр╣Йр╕▓р╕Зр╕нр╕┤р╕Зр╕Ър╕▓р╕Зр╕кр╣Ир╕зр╕Щ:.*$", "", txt, flags=re.MULTILINE)
    txt = re.sub(r"р╕нр╣Йр╕▓р╕Зр╕нр╕┤р╕З .*$", "", txt, flags=re.MULTILINE)

    # р╕ер╕Ър╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕лр╕бр╕▓р╕вр╕Хр╕Бр╣Бр╕Хр╣Ир╕З ( - р╕Б р╕Б + ) р╕Чр╕╡р╣Ир╣Ар╕Ир╕нр╣Гр╕Щр╣Ар╕зр╣Зр╕Ър╕Вр╣Ир╕▓р╕з
    txt = re.sub(r"-\s*р╕Б\s*р╕Б\s*\+", "", txt)

    # р╕ер╕Ъ timestamp, р╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╣Гр╕Щр╕зр╕Зр╣Ар╕ер╣Зр╕Ъ
    txt = re.sub(r"\d{1,2}\s*[р╕Б-р╕о]+\.\s*\d{2,4}", "", txt)
    txt = re.sub(r"\(.*?р╕Щ\.\)", "", txt)

    # р╕ер╕Ър╕кр╣Ир╕зр╕Щр╕Чр╣Йр╕▓р╕вр╕Чр╕╡р╣Ир╣Др╕бр╣Ир╣Гр╕Кр╣Ир╣Ар╕Щр╕╖р╣Йр╕нр╕Вр╣Ир╕▓р╕з
    txt = remove_tail_noise(txt)

    # р╕ер╕Ъ space р╕Лр╣Йр╕│р╕нр╕╡р╕Бр╕Др╕гр╕▒р╣Йр╕З
    txt = re.sub(r"\s+", " ", txt).strip()

    return txt

def is_valid(text: str) -> bool:
    """р╣Ар╕Кр╣Зр╕Бр╕зр╣Ир╕▓р╕Вр╣Ир╕▓р╕зр╣Ар╕лр╕бр╕▓р╕░р╕кр╕бр╕кр╕│р╕лр╕гр╕▒р╕Ъ labeling р╕лр╕гр╕╖р╕нр╣Др╕бр╣И"""
    if len(text) < 100:
        return False
    th_chars = len(re.findall(r"[\u0E00-\u0E7F]", text))
    if th_chars / max(len(text), 1) < 0.4:
        return False
    return True


# ---------- MAIN ----------
def main():
    print("ЁЯз╝ р╣Ар╕гр╕┤р╣Ир╕бр╕Чр╕│р╕Др╕зр╕▓р╕бр╕кр╕░р╕нр╕▓р╕Фр╕Вр╕▒р╣Йр╕Щр╕кр╕╕р╕Фр╕Чр╣Йр╕▓р╕в р╣Ар╕Юр╕╖р╣Ир╕нр╣Ар╕Хр╕гр╕╡р╕вр╕б labeling ...")
    total, kept = 0, 0

    with input_file.open(encoding="utf-8") as fin, output_file.open("w", encoding="utf-8") as fout:
        for line in fin:
            total += 1
            try:
                item = json.loads(line)
            except json.JSONDecodeError:
                continue

            text = clean_text(item.get("text", ""))
            if is_valid(text):
                fout.write(json.dumps({
                    "title": item.get("title", "").strip(),
                    "text": text
                }, ensure_ascii=False) + "\n")
                kept += 1

            if kept % 50 == 0 and kept > 0:
                print(f"   тЬЕ р╕Др╕ер╕╡р╕Щр╣Бр╕ер╣Йр╕з {kept} р╕Вр╣Ир╕▓р╕з (р╕Ир╕▓р╕Б {total})")

    print(f"\nЁЯОп р╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ! р╣Ар╕Хр╕гр╕╡р╕вр╕бр╕Вр╣Ир╕▓р╕зр╕Юр╕гр╣Йр╕нр╕б labeling р╣Др╕Фр╣Йр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф {kept}/{total} р╕Вр╣Ир╕▓р╕з тЖТ {output_file}")


if __name__ == "__main__":
    main()